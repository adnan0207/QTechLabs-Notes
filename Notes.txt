COMPUTER PROGRAMMING

A program requires CPU and RAM


                    High Voltage
                           |
                           |
Machine Language ------>   1/0   ------> Binary Language
                             |
                             |
                        Low Voltage


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


High Level Language--------                   File 
                          |                     |                       ---------------------Memory (RAM)
                          |                     |                       |
                          |                     |                       |
Mid Level Language--------|----------------  Program   -----------------|
                          |                     |                       |
                          |                     |                       |
                          |                     |                       ---------------------Processing (CPU)   CPU Memory---
Low Level Language---------               Set Of Instruction                                                                |
                                                                                                                            |
                                                                                                                            |--- Cache
                                                                                                                            |
                                                                                                                            |--- Register


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


JAVA

JDK - Java Development Kit              javac
JRE - Java Runtime Environment          java
JVM - Java Virtual Machine              jit



Source Code -----------> Byte Code -----------> Machine Code


javac ProgramName.java   --------------->   Compile
java ProgramName         --------------->   Run


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


LIBRARY IN JAVA

Library - Set of files which contains frequently used logics and consist of large number of methods which are commonly used.

In java library there are many jar files (.jar - java archive) these are compressed files.
It consist of many .class files.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


FUNDAMENTAL CONCEPTS

=> Data Type
=> Variables
=> Method
=> Object
=> Class
=> Conditional Statements
=> Loops


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


DATA TYPE

Data type used to tell the type of data a variable can store.
eg. int, byte, short, long, float, boolean, double, char


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


VARIABLE

Named memory location.
Container.
Way to represent memory location.

------------------------------------------------------------
| Name Of Variable |      Value      | Memory Address      |
|------------------|-----------------|---------------------|
| num1             | 10              | 000                 |
| x                | 25              | 001                 |
| age              | 18              | 002                 |
| gender           | m               | 003                 |
--------------------------RAM-------------------------------


To store a data in variable first we need to declare it


STEP 1 : Variable Declaration

SYNTAX : data_type name_of_variable;

eg. int x;      
float num;
char characterVariable;


STEP 2 : Variable Initialization

SYNTAX : name_of_variable = value;

eg. x=10;   
num=54.6f
characterVariable = 'A';


We can declare and initialize the variable in a single line also

SYNTAX : data_type name_of_variable = value;

eg.  int number = 5;
float no = 1.5f;
char ch = 'A';


Types of Variables ->

1) INSTANCE VARIABLE

# yeh variables directly class ke andar hote hai
# har object ke pass iski apni ek copy hoti hai

2) STATIC VARIABLE

# these are class level variables 
# all objects will share the same single copy

3) LOCAL VARIABLE

# yeh variable function ke andar hote hai
# tbkt function chalega tbtk iski life rahegi
# Local Variable m koi default value nahi hoti hai
# can only be used when declared as well as initialized 



                                                 Instance Variables
                                                    .............
                                                    .    ----   .
                                                    .  a |  |   .
                                                    .    ----   .
obj 1  ----------------------------------------->   .           .  -------------------------------------
                                                    .    ----   .                                       |
                                                    .  b |  |   .                                       |
                                                    .    ----   .                                       |
                                                    .............                                       |
                                                                                                        |
                                                                                                        v
                                                 Instance Variables
                                                    .............                                   .............                           
                                                    .    ----   .                                   .           .
                                                    .  a |  |   .                                   .           .
                                                    .    ----   .                                   .    ----   .
obj 2  ----------------------------------------->   .           .  ------------------------------>  .  c |  |   . Static Variable
                                                    .    ----   .                                   .    ----   .
                                                    .  b |  |   .                                   .           .
                                                    .    ----   .                                   .           .
                                                    .............                                   .............

                                                                                                        ^
                                                 Instance Variables                                     |
                                                    .............                                       |   
                                                    .    ----   .                                       |
                                                    .  a |  |   .                                       |
                                                    .    ----   .                                       |
obj 3  ----------------------------------------->   .           .  --------------------------------------
                                                    .    ----   .
                                                    .  b |  |   .
                                                    .    ----   .
                                                    .............



=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


METHOD

A way to perform some task

SYNTAX:        return_datatype name_of_method (Parameters/Arguments){
                    // code or logic
               }

eg.            int addTwoNumber(int x, int y){
                  return x+y;
               }


METHOD SIGNATURE

public int sum (int a, int b){
    // method body
}

public              ->      Access Specifier
int                 ->      Return Type
sum                 ->      Method Name
int a, int b        ->      Parameters
sum (int a, int b)  ->      Method Signature


Method Signature = Name of method + Arguments of method


JAVA RULE : kisi bhi ek class m same signature ke 2 methods nahi ho sakte hai

# void main (String[] args)
# public static void main(String[] args)
they both are same methods can not be used in a same class

# void main(String[] args, int a)
# public static void main(String[] args)
they both are different methods could be used in a same class


Static Methods

Static methods could be called without making objects and non static methods could only be called with the help of object.


We can call a static method in non static method without making object
We can call non static method in non static method without making object
We can call static method in static method without making object
We cannot call non static method in static method without making object


In main method we use static (public static void main (String[] args)) as when java run our code JVM could call it without making object.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


OBJECT

Ojbects are real word entities(car, bus, dog).
Ojbects are instance of class.

---------------------------------------------------
| Any real world object = Properties + Behaviour  |
| Ojbects in OOPs       = Variables  + Methods    |
---------------------------------------------------

SYNTAX    ClassName objectName = new ClassName();
                         |
                         |
                         ---> reference variable

eg. Suppose there is a class HumanBeing


public class HumanBeing {
    String name;
    int age;
    long mobileNumber;

    void walk(){
        System.out.println("Walking");
    }
}


Now to make object


HumanBeing obj1 = new HumanBeing();

        obj1.name = "Adnan";
        obj1.age = 21;
        obj1.mobileNumber = 999999;

        obj1.walk();



-------------------------------------
| Class  = Logical Representation   |
| Ojbect = Physical Representation  |
-------------------------------------


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


CLASS

It is a template/blueprint from which object are created.
Defines the core properties and functions.


-----------------------------------------------------
| Class  = Attributes/Variables + Functions/Methods |
-----------------------------------------------------

SYNTAX      
class NameOfClass{
    // variables
    // methods
}

eg.     
public class HumanBeing {
    String name;
    int age;

    void walk(){
        System.out.println("Walking");
    }
    
}


-------------------------------------
| Class  = Logical Representation   |
| Ojbect = Physical Representation  |
-------------------------------------


There are multiple types of variables in Class - 

Types of Variables ->

1) INSTANCE VARIABLE

# yeh variables directly class ke andar hote hai
# har object ke pass iski apni ek copy hoti hai

2) STATIC VARIABLE

# these are class level variables 
# all objects will share the same single copy

3) LOCAL VARIABLE

# yeh variable function ke andar hote hai
# tbkt function chalega tbtk iski life rahegi
# Local Variable m koi default value nahi hoti hai
# can only be used when declared as well as initialized 



                                                 Instance Variables
                                                    .............
                                                    .    ----   .
                                                    .  a |  |   .
                                                    .    ----   .
obj 1  ----------------------------------------->   .           .  -------------------------------------
                                                    .    ----   .                                       |
                                                    .  b |  |   .                                       |
                                                    .    ----   .                                       |
                                                    .............                                       |
                                                                                                        |
                                                                                                        v
                                                 Instance Variables
                                                    .............                                   .............                           
                                                    .    ----   .                                   .           .
                                                    .  a |  |   .                                   .           .
                                                    .    ----   .                                   .    ----   .
obj 2  ----------------------------------------->   .           .  ------------------------------>  .  c |  |   . Static Variable
                                                    .    ----   .                                   .    ----   .
                                                    .  b |  |   .                                   .           .
                                                    .    ----   .                                   .           .
                                                    .............                                   .............

                                                                                                        ^
                                                 Instance Variables                                     |
                                                    .............                                       |   
                                                    .    ----   .                                       |
                                                    .  a |  |   .                                       |
                                                    .    ----   .                                       |
obj 3  ----------------------------------------->   .           .  --------------------------------------
                                                    .    ----   .
                                                    .  b |  |   .
                                                    .    ----   .
                                                    .............


Classes can also be used as custom datatypes

public class Box {
	
	int l;
	int b;
}

Box box1 = new Box();				
box1.l = 10;
box1.b = 20;

Box box2 = new Box();
box2.l = 30;
box2.b = 50;

                        .............  
                        .    ----   .
                        .  l |10|   .
                        .    ----   .
box1 -------------->    .           .
                        .    ----   .
                        .  b |20|   .
                        .    ----   .
                        .............
	
		
                        .............  
                        .    ----   .
                        .  l |30|   .
                        .    ----   .
box2 -------------->    .           .
                        .    ----   .
                        .  b |50|   .
                        .    ----   .
                        .............

if we do,

box1 = box2

what will happen? you might think 


                        .............                                                .............     
                        .    ----   .                                                .    ----   .
                        .  l |10|   .                                                .  l |30|   .
                        .    ----   .                                                .    ----   .
box1 -------------->    .           .                        box1 -------------->    .           .
                        .    ----   .                                                .    ----   .
                        .  b |20|   .                                                .  b |50|   .
                        .    ----   .                                                .    ----   .
                        .............                                                .............
	
		
                        .............                                                .............
                        .    ----   .                                                .    ----   .
                        .  l |30|   .                                                .  l |30|   .
                        .    ----   .                                                .    ----   .
box2 -------------->    .           .                        box2 -------------->    .           .
                        .    ----   .                                                .    ----   .
                        .  b |50|   .                                                .  b |50|   .
                        .    ----   .                                                .    ----   .
                        .............                                                .............

NO THIS IS WRONG

this is only valid in the case of variables

int x = 20;
int y = 40;
x=y;

REPRESENTATION

int x = 20;
int y = 40;
   ----             ----   
 x |20|           y |40|
   ----             ---- 

x=y;
   ----   
 x |40|
   ---- 


so, in the case of objects


                        .............                                                .............     
                        .    ----   .                                                .    ----   .
                        .  l |10|   .                                                .  l |10|   .
                        .    ----   .                                                .    ----   .
box1 -------------->    .           .                        box1 -----              .           .
                        .    ----   .                                  |             .    ----   .
                        .  b |20|   .                                   |            .  b |20|   .
                        .    ----   .                                    |           .    ----   .
                        .............                                     |          .............
                                                                           |
		                                                                    |
                        .............                                        |       .............
                        .    ----   .                                         |      .    ----   .
                        .  l |30|   .                                         ---->  .  l |30|   .
                        .    ----   .                                                .    ----   .
box2 -------------->    .           .                        box2 -------------->    .           .
                        .    ----   .                                                .    ----   .
                        .  b |50|   .                                                .  b |50|   .
                        .    ----   .                                                .    ----   .
                        .............                                                .............

Now if we want to make changes in box2.l or box2.b the box1.l and box1.b would also get altered and vice versa.

This is happening as now they both are pointing towards the same object.

The variables for objects are called reference variables.


DIFFERENT USES OF CLASS

# Used as main class with main method to run the program.

# Used as a library.
  eg- Calculator class having services like add, sub, mul, etc.

# Used to write bussiness logics. 
  eg- Banking Services like fund transfer and open account

# Used as a custom datatypes and these datatypes can be used as inputs in methods as well as return types in methods. This helps up to return and
  take input multiple values in one go.

# Used as a blue print for object.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


STATIC KEYWORD

public static void main(String[] adnan){

}

here we are using static because static methods can be called without making objects


Static methods

We can call static method in a non static method without object.
We can call non static method in a non static mehtod without object.
We cannot call non static method in a static method for this we need to make object of that non static method.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


CONDITIONAL STATEMENT

Also called decision-making statements.
Decides which statements to execute under which situation.
Control the flow of program based on certain conditions.


IF

if(condition){

}


IF ELSE

if (condition) {
            
} else {
            
}


IF ELSE IF

if(condition1){  
 
} else if(condition2){  

} else if(condition3){  

} else{  

}  


NESTED IF


if (condition) {
   
    if (condition) {
            
    } else {
            
    }
            
} else {

    if (condition) {
            
    } else {
            
    }
            
}


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


LOOPS

Repeating same process multiple times until a specific condition satisfied.

Without amy condition loop will do the same for infinity.


FOR LOOP


initialize variable
        |
        v
  check condition
        |
        v
   execute body
        |
        v
  update variable
        |
        v
  repeat or exit


SYNTAX

for(initialization; condition; increment/decrement){    
//statement or code to be executed    
}    


eg. 
CODE

public class ForExample {  
    public static void main(String[] args) {  
        //Code of Java for loop  
        for(int i=1;i<=10;i++){  
            System.out.println(i);  
        }        
    }  
}  

OUTPUT

1
2
3
4
5
6
7
8
9
10


WHILE LOOP

  check condition
        |
        v
if true, execute body
        |
        v
  update variable
        |
        v
  repeat or exit


SYNTAX

while (condition){    
//code to be executed   
Increment / decrement statement  
}    


eg.
CODE

public class WhileExample {  
    public static void main(String[] args) {  
        int i=1;  
        while(i<=10){  
            System.out.println(i);  
            i++;  
        }  
    }  
}  

OUTPUT

1
2
3
4
5
6
7
8
9
10


DO WHILE LOOP

   execute body
        |
        v
  check condition
        |
        v
  if true, repeat
        |
        v
     or exit


SYNTAX

do{    
//code to be executed / loop body  
//update statement   
}while (condition);   


eg.
CODE

public class DoWhileExample {    
    public static void main(String[] args) {    
        int i=1;    
        do{    
            System.out.println(i);    
            i++;    
        }while(i<=10);    
    }    
}

OUTPUT

1
2
3
4
5
6
7
8
9
10


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


AND (&&) OPERATOR

all the conditions should be true
(c1 && c2 && c3)

OR (||) OPERATOR

one of the condition could be true
(c1 || c2 || c3)


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


CONTINUE STATEMENT

Jump to the next iteration of the loop immediately.
It continues the current flow of the program and skips the remaining code at the specified condition.

eg.
CODE

public class ContinueExample {  
    public static void main(String[] args) {  
        for(int i=1;i<=10;i++){  
            if(i==5){  
                continue;  
            }  
        System.out.println(i);  
        }  
    }  
}  

OUTPUT

1
2
3
4
6
7
8
9
10

(As you can see in the above output, 5 is not printed on the console. It is because the loop is continued when it reaches to 5)


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


BREAK STATEMENT

The loop is immediately terminated and the program control resumes at the next statement.

eg.
CODE

public class BreakExample {  
    public static void main(String[] args) {  
        for(int i=1;i<=10;i++){  
            if(i==5){  
                break;  
            }  
            System.out.println(i);  
        }  
    }  
}  

OUTPUT

1
2
3
4


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


ARRAY (Object of a dynamically generated class)

Array are used to store multiple values in single variable, instead of declaring seperate variables for each value.
An array is collection of similar type of data items stored at contagious memory location.


SYNTAX

int[] a;                --------> array declaration

Array Declaration different techniques :

=> data_type[] name_of_array;
=> data_type []name_of_array;
=> data_type name_of_array[];

a = new int[5];         --------> array initialization or memory allocation
            |
            |
            V
        array size


------OR------


int[] a = new int[5];       (Same as class)


                    0   1   2   3   4
+---+              +---+---+---+---+---+
|   |    ---->     |   |   |   |   |   |  
+---+              +---+---+---+---+---+
  a                a[0] a[1]........a[4]        -------> array index

int[] a = new int[10];
(when we will use (a.length) we get the length of the 'a' array i.e. 10)


CODE

int[] arr = new int[7];

arr[0] = 3;
arr[1] = 5;
arr[2] = 70;
arr[3] = 15;
arr[4] = 11;
arr[5] = 8;
arr[6] = 1;


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


ESCAPE SEQUENCE

Character preceded by backslash (\)
These escape characters are used to perform some special kind of task


NEW LINE CHARACTER ("\n")

this moves our cursor to next line


println V/S printed

System.out.println();
this prints a new line character along

System.out.print();
this dont print a new line character


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


INPUT FROM USER

We use java Scanner Class which allow us to take input from the console
it belons to java.util package
when we need to use Scanner in our program we would need to write

import java.util.Scanner;

now to take input we need to make a object of Scanner Class

Scanner sc = new Scanner(System.in);

System.in -> System ek class h jisme 'in' naam ka variable h

for input of number 

int x = sc.nextInt();
(Similarly we could do for other datatypes also)


When we use System.out.println();

this system is in the library and system is a class file
System.class is in the java.lang folder

java.lang -> it means there is a 'java' folder and inside it have a 'lang' folder where we have 'System.class'

java.lang is in rt.jar

if we open we could see in System.class file there would be written (package java.lang)

in same way Scanner class is in java.util folder

so it would have (package java.util)


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


PACKAGE AND IMPORT


PACKAGE 

Package is nothing just a folder
A java package groups of similar classes, interfaces and sub-packages 


SYNTAX-

package x.y.z

class Demo{

}


VIRTUAL REPRESENTATION

-----
| X |----------
-----          |
               |
               |               
               |               
             -----
             | Y |----------
             -----          |
                            |
                            |               
                            |               
                          -----
                          | Z |
                          -----
                            |
                            |
                            |
                            |   
                            -------------> class Demo



IMPORT 

If we want to use any class from different package we need to tell our program from where it is coming 

eg-

package A.B.C;
import java.util.Scanner;

class Demo{
    public static void main(String[] args){

        System.out.println("Adnan");
        Scanner sc = new Scanner(System.in);

    }
}

RULE : import statement comes after package

import java.util.Scanner;


--------
| java |--------
--------       |
               |
               |               
               |               
             --------
             | util |--------
             --------       |
                            |
                            |               
                            | 
                            V              
                         Scanner --------> this is a class


FULLY QUALIFIED NAME

in import java.util.Scanner;

java.util.Scanner ---------> Fully Qualified name

Fully Qualified Name -> Complete name of class including the package name to which that class belongs


QUESTION - When we are using "System.out.println();" we are using System class from java.lang library but in code we do not import "java.lang" WHY?

ANSWER - java.lang contains the basic and fundamental classes that are important for building a java program.


Package

------
| f1 |--------
------       |
             |
             |               
             |               
           ------
           | f2 |--------
           ------       |
                        |
                        |               
                        | 
                        V              
                       Demo


package f1.f2;
class Demo{
    void msg(){
        System.out.println("Adnan");
    }
}

Now we want to use this in other class

Import


------
| f3 |--------
------       |
             |
             |               
             |               
           ------
           | f4 |--------
           ------       |
                        |
                        |               
                        | 
                        V              
                       Name


package f3.f4;
import f1.f2.Demo;
class Name{
    public static void main(String[] args){
        Demo obj = new Demo();
        obj.msg();
    }
}


If we want to use any class from library we have two ways-

1) WITH IMPORT

import com.google.calculator;
Calculator obj = new Calculator();

import java.util.Scanner;
Scanner sc = new Scanner(System.in);

2) WITH FULLY QUALIFIED NAME

com.google.Calculator obj = new com.google.Calculator(); 

java.util.Scanner sc = new java.util.Scanner(System.in);


We use name of package as reverse domain name so there will be no naming conflict.

=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


IDENTIFIERS

Name given to various elements like variables, methods, class.
Identifiers can't be keywords.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


KEYWORDS

Keywords are reserved words they have predefined meanings.
eg - int, float, if, else, public, class

Keywords can not be used as identifiers.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


CONSTRUCTOR

Use : to initialize the state of objects.

A constructor is a special method used to initialize objects.
Same as class.
No return type.

Constructors are called automatically when an object is made using 'new' keyword.


public class Dog {
    
    String name;
    int age;

}

we make object if this class

Dog dogObj1 = new Dog();
                  -----
                    |
                    |
                    V
         this is constructor call


// constructor
public Dog(){      
    System.out.println("no arguments constructor");
}

when we make a class compiler gives us default constructor, the above constructor is the default constructor which our compiler 
make automatically for Dog class.

Default constructor is also known as no-arg constructor

    Dog obj = new Dog();
    obj.name = "nameofdog";
    obj.age = 5;

also instead of this we can use a constructor

public Dog(String naam, int umar){
        System.out.println("parameterized constructor being called");

        this.name = naam;
        this.age = umar;
}

now we make the object

Dog dogObj = new Dog("Scooby", 5);


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x


MAVEN

Maven is a build tool.


                        -------------------------
                        | Software/Application  |
                        -------------------------
                                    |
                                    |
                                    |
                                    V
                                -----------
                                | Project |
                                -----------
                                    |   
                                    |
                                    |
                                    V
            --------------------------------------------------------
            | Folder in which files are stored in an organised way |
            --------------------------------------------------------


BUILD

Compile
.class files

Package 
jar files


Deployment 

Run the application on local or server machine


Maven 

# compile - it could compile our file (.class file) 
# package - it could make JAR file 
# includes libraries in our project (these could be external libraries) these are imported to make our work easy. 
# These libraries are also called dependencies (Maven helps in dependency management) 
# Standard way to organise our project 
# Project version management 

Other build tools - Ant, Gradle


What after creating maven project looks like?


-------------------
| Project Folder  |
-------------------
        |
        |
        |       --------
        --------| src  |
        |       --------
        |           |
        |           |        --------
        |           ---------| main |
        |           |        --------
        |           |           |
        |           |           |        --------
        |           |           ---------| java |
        |           |           |        --------
        |           |           |
        |           |           |        ------------
        |           |           ---------| resource |
        |           |                    ------------
        |           |        --------
        |           ---------| test |
        |                    --------
        |                       |
        |                       |        --------
        |                       ---------| java |
        |                       |        --------
        |                       |
        |                       |        ------------
        |                       ---------| resource |
        |                                ------------
        |
        |
        |
        |       -----------
        --------| target  |
        |       -----------
        |
        |
        |
        |       ------------
        --------| pom.xml  |
                ------------



------------
| pom.xml  |
------------

Most Important File

P - Project
O - Object
M - Model

It captures the state and behaviour of our project.

yeh file project ko object ke form me model krti hai.

This file contains all the information related to our project. example name, dependencies, version, libraries used, etc.

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>com.adnan</groupId>
  <artifactId>15June2024</artifactId>
  <version>1.0.0</version>
  
  <name>employeemanagement</name>
  
  <packaging>jar</packaging>
</project>


<modelVersion>4.0.0</modelVersion> -------> NEVER TOUCH THIS

<groupId>com.adnan</groupId>              -----|
<artifactId>15June2024</artifactId>            |----> These three are called maven co-ordinates
<version>1.0.0</version>                  -----|


We make files in src/main/java, as it is a rule to write your code here. 
If we made multiple packages and multiple source/class file 
now we have so many different class files and in different packages thus we can't compile them one by one 
so we would need to use Maven 

STEPS 

go to CMD 
go to the directory 
used "mvn compile" 
now in our pom.xml file add <packaging>jar</packaging>
So maven would understand that it needs to make a JAR file 
now we use "mvn package" 
now we could see in target folder a JAR file is there 15June2024-1.0.0.jar
15June2024-1.0.0.jar -------> <artifactId>-<version>.jar
                                    |           |
                                    V           V
                                15June2024    1.0.0

Now if we use "mvn clean" it would delete our target folder, basically target folder is made on compile time. 
Now if we use "mvn install" it will compile our program then package it and then would take our jar file and copy it to other location (.m2 maven repository)

mvn compile -> compile
mvn package -> compile + jar
mvn clean -> delete target folder
mvn install -> compile + jar + copy jar to .m2 

.m2

Local maven repository.
When we run mvn install our project (.jar) stores here.
Also helps in dependency management, if in our project we have use external libraries it would also be stored here.

How does maven manage dependencies? How to use external dependencies?

Step 1 open pom.xml
Step 2 make a dependencies tag <dependencies>	</dependencies>
Step 3 Search on internet for your required dependency. example - if I want for UUID generation
Step 4 Search maven java dependency for UUID generation
Step 5 Now you would see different public remote maven repositories where multiple dependencies are uploaded.

Dependencies ----> library ----> jar files 

Step 6 Choose the dependency you want to use, then you choose the version of that dependency which you want in your project. 
Step 7 After clicking on required version you would see a code (.xml code) inside dependency tag (<dependency>). 
Step 8 Inside dependency tag (<dependency>) you would see maven coordinates written these coordinates are of dependency which you are taking.
example - <dependency>
		 	 <groupId>com.fasterxml.uuid</groupId>
		 	 <artifactId>java-uuid-generator</artifactId>
		 	 <version>3.1.4</version>
		 </dependency>
        
Step 9 Copy it and paste in your project XML file inside dependency tag (<dependency>) which we made earlier.
Step 10 Save all changes of your XML file.
Step 11 You would see in your folder below jre system lib there is something new named "maven dependencies".

Inside this there would jar files of the dependency which we imported in our project from internet. 
Now you could easily use the classes and methods of that library/dependency in your project.
You could also see these libraries present in .m2 directory.

Question - How does maven keep track of different versions of our project? 
Answer - Suppose you did some changes in your code added few features and want to make another package for your new version.
Firstly you would need to open pom.xml 
Under maven coordinates you would find a <version> tag would look like <version>1.0.0</version> now give it a new version <version>2.0.0</version>.
Run "mvn install" 
Now if you go to the .m2 folder you would see to different folders 1.0.0 and 2.0.0 both the folder would have different jar files.


=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x



=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x
=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x=x